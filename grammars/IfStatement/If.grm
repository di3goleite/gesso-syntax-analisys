"Start Symbol" = <Program>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{ID Head}      = {Letter}
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["\]


! -------------------------------------------------
! Terminals
! -------------------------------------------------

Number = {Number}
Identifier    = {ID Head}{ID Tail}*
StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The grammar starts below
<Program> ::= <IfStatement>

<Not LogicExp> ::= '!'<And LogicExp> | <And LogicExp>

<And LogicExp> ::= <And LogicExp>'&&'<Or LogicExp> | <Or LogicExp>

<Or LogicExp> ::= <Or LogicExp> '||' <Exp> | <Exp>

<Exp> ::= <Expression> | '(' <Not LogicExp> ')'

<Expression>  ::= <Expression> '>'  <Add Exp>
               |  <Expression> '<'  <Add Exp>
               |  <Expression> '<=' <Add Exp>
               |  <Expression> '>=' <Add Exp>
               |  <Expression> '==' <Add Exp>    !Equal
               |  <Expression> '!=' <Add Exp>    !Not equal
               |  <Add Exp>

<Add Exp>     ::= <Add Exp> '+' <Mult Exp>
               |  <Add Exp> '-' <Mult Exp>
               |  <Mult Exp>

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp>
               |  <Mult Exp> '/' <Negate Exp>
               |  <Negate Exp>

<Negate Exp>  ::= '-' <Value>
               |  <Value>

!Add more values to the rule below - as needed

<Value> ::= Number
         |   StringLiteral
         |   Identifier <ArraySize>
         |   Identifier '.' Identifier
         |  '(' <Expression> ')'

<ArraySize> ::= '[' Number ']' <ArraySize>
            |

!If statements

<IfStatement> ::= 'if''('<Not LogicExp>')''{'<Command>'}'<ElseStatement>

<ElseStatement> ::= 'else''{'<Command>'}' |

<Command> ::= Identifier '=' Number