"Name"     = 'Enter the name of the grammar'
"Author"   = 'Enter your name'
"Version"  = 'The version of the grammar and/or language'
"About"    = 'A short description of the grammar'

"Start Symbol" = <Start>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{WS}           = {Whitespace} - {CR} - {LF}
{ID Head}      = {Letter} + [_]
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

!Whitespace    = {WS}+
!NewLine       = {CR}{LF} | {CR} | {LF}

Identifier    = {ID Head}{ID Tail}*
DecLiteral       = [0123456789]{Digit}*
FloatLiteral     = {Digit}*'.'{Digit}+
StringLiteral = '"' {String Chars}* '"'
BoolLiteral = 'true' | 'false'

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The following rule defines a series of newline tokens.
! Use this rule rather than the newline terminal.

!<nl>     ::= NewLine <nl>          !One or more
!          |  NewLine

!<nl Opt> ::= NewLine <nl Opt>      !Zero or more
!          |  !Empty

! <nl opt> removes blank lines before first statement

!<Start>   ::= <nl opt> <Program> <nl opt>
<Start>   ::= <Program>

<Program> ::= <Variables>


<Type> ::= 'int'
        | 'float'
        | 'string'
        | 'bool'
        | Identifier


! -------------------------------------------------
! Vector Access
! -------------------------------------------------
          
<GeneralIdentifier> ::= <OptVector> <ComposedIdentifier>

<OptVector> ::= Identifier <VectorIndex>
             
<ComposedIdentifier> ::= '.' <GeneralIdentifier>
                      |
                                           
<VectorIndex>  ::= '[' <Expression> ']' <VectorIndex>
                |
 

<GeneralIdentifierList> ::= <GeneralIdentifier> <OptionalExtraIds>
                         |

<OptionalExtraIds> ::= ',' <GeneralIdentifierList> 
             | <GeneralIdentifier>
             |
 
! -------------------------------------------------
! Vector Declaration
! -------------------------------------------------

<VectorDecl>  ::= <Expression> 
                | <VectorBody>
                
<VectorBody> ::= '[' <VectorValueList> ']'
                
<VectorValueList> ::=  <VectorDecl> <OptionalValue>
             
<OptionalValue> ::= ',' <VectorValueList>
                 | <VectorDecl>
                 |
              
! -------------------------------------------------
! Variable Declarations
! -------------------------------------------------
<Variables> ::= 'variables''{' <VariablesBody> '}'

<VariablesBody> ::=  <Type> <VarDeclList> ';' <VariablesBody>
            |

<VarDeclList> ::= <VarDecl>  <OptionalDecls>
                       
<OptionalDecls>  ::= ',' <VarDeclList>
                      |  <VarDecl>
                      |

<VarDecl> ::= <GeneralIdentifier> <VarAttribution>
           
<VarAttribution> ::= '=' <VectorDecl>
                  |

! -------------------------------------------------
! Const Declarations
! -------------------------------------------------

<Const> ::= 'const''{' <ConstBody> '}'
        
<ConstBody> ::=  <Type> <ConstAssignmentList> ';' <ConstBody>
            |  

<ConstAssignment> ::= <GeneralIdentifier> '=' <VectorDecl> 
                   
<ConstAssignmentList> ::= <ConstAssignment>  <OptionalAssignments>
                       
<OptionalAssignments>  ::= ',' <ConstAssignmentList>
                      |  <ConstAssignment>
                      |
                      
! -------------------------------------------------
! Expressions
! -------------------------------------------------


<Expression>  ::= <Add Exp> '>'  <Expression> 
               |  <Add Exp> '<'  <Expression> 
               |  <Add Exp> '<=' <Expression> 
               |  <Add Exp> '>=' <Expression>
               |  <Add Exp> '==' <Expression>    !Equal
               |  <Add Exp> '!=' <Expression>    !Not equal
               |  <Add Exp> '&&' <Expression>
               |  <Add Exp> '||' <Expression>
               |  <Add Exp> '!'  <Expression>
               |  <Add Exp>

<Add Exp>     ::= <Mult Exp> '+' <Add Exp>
               |  <Mult Exp> '-' <Add Exp>
               |  <Mult Exp> 

<Mult Exp>    ::= <Negate Exp> '*' <Mult Exp> 
               |  <Negate Exp> '/' <Mult Exp> 
               |  <Negate Exp> 

<Negate Exp>  ::= '-' <Value> 
               |  <Value> 

!Add more values to the rule below - as needed

<BaseValue> ::= DecLiteral
             | FloatLiteral
             | StringLiteral
             | BoolLiteral
             | <GeneralIdentifier>

<Value>      ::= <NumberLiteral>
                | StringLiteral
                | BoolLiteral 
                |  '(' <Expression> ')'


<Number>     ::= <Increment> <Expression>
               | <Expression> <Increment>
               | <Expression>
               
<NumberLiteral> ::= DecLiteral
                 | FloatLiteral
                 | <GeneralIdentifier>

<Increment>  ::= '++' 
               | '--'


! -------------------------------------------------
! Function and Method Calls
! -------------------------------------------------

<ArgList>  ::= <BaseValue> <OptionalExtraArgs>
            |
 
<OptionalExtraArgs> ::= ',' <ArgList> 
             | <BaseValue>
             |
                 
<FunctionParams>  ::= '(' <ArgList> ')'

<MethodCall>  ::= <GeneralIdentifier> <FunctionParams> 


<Write>  ::= 'write' <FunctionParams>
<Read>  ::= 'read' <GeneralIdentifierList>
         
! -------------------------------------------------
! Control Structures
! -------------------------------------------------

<If>  ::= 'if' 

<While>  ::= 'while' '(' <Expression> ')' '{' <Statements> '}' 
          
! -------------------------------------------------
! Statements and Blocks
! -------------------------------------------------

<Statements>  ::= <Statement><Statements>
               | 

<Statement>  ::= <If>
              | <While>
              | <Assignment> ';'
              | <Write> ';'
              | <Read> ';'

               
<RetornableStatements> ::= <Expression>
                        | <MethodCall>
                        
<Assignment>  ::= Identifier '=' <RetornableStatements>

! -------------------------------------------------
! Methods
! -------------------------------------------------

<Function>  ::= <Type> Identifier '('<Params> ')' <FunctionBody>

<Params> ::= <Type> <OptVector> <OptParams>

<OptParams> ::= ',' <Params>
             |

<FunctionBody> ::= '{' <Statements> 'return' <Expression> '}'

<Method> ::= 'method' <Function>

! -------------------------------------------------
! Class
! -------------------------------------------------



